# -*- coding: utf-8 -*-
"""Predicting_House_Prices_with_Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e42ZBfjyAusC-A5ekr9RDv52oV7Lv03e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 3. Load dataset
'''from google.colab import files
uploaded = files.upload()

filename = list(uploaded.keys())[0]'''
df = pd.read_csv('Housing.csv')

print("Dataset shape:", df.shape)
print(df.head())

# 4. Data exploration
print(df.info())
print(df.describe())

# 5. Handle missing values
df = df.dropna()  # Drop rows with missing values

# 6. Encode categorical variables
df = pd.get_dummies(df, drop_first=True)

# 7. Feature/Target split
target_column = "price"  # Change if your target variable has a different name
X = df.drop(columns=[target_column])
y = df[target_column]

# 8. Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 9. Train Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# 10. Predictions
y_pred = model.predict(X_test)

# 11. Evaluation
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"R-squared: {r2:.2f}")

# 12. Visualization: Predicted vs Actual
plt.figure(figsize=(7,5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')
plt.show()

# 13. Feature importance
coef_df = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
coef_df = coef_df.sort_values(by='Coefficient', ascending=False)
print("\nFeature Coefficients:\n", coef_df)

# Create a sample input with the same columns as X
sample_data = pd.DataFrame([{
    'area': 3000,        # Example: house area in sq ft
    'bedrooms': 4,
    'bathrooms': 3,
    'stories': 2,
    'mainroad_yes': 1,   # 1 if on main road, else 0
    'guestroom_yes': 0,
    'basement_yes': 1,
    'hotwaterheating_yes': 0,
    'airconditioning_yes': 1,
    'parking': 2,
    'prefarea_yes': 1,
    'furnishingstatus_semi-furnished': 1,
    'furnishingstatus_unfurnished': 0
}])

# Ensure same column order as training data
sample_data = sample_data[X.columns]

predicted_price = model.predict(sample_data)[0]
print(f"\nPredicted House Price for Sample Data: {predicted_price:.2f}")
