# -*- coding: utf-8 -*-
"""Exploratory Data Analysis (EDA) on Retail Sales Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19escGVDtLIA3ivrmOFdgBgEyVfUQkQcX
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""clean plots"""

sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

"""Load Data"""

retail_df = pd.read_csv("retail_sales_dataset.csv")
menu_df = pd.read_csv("menu.csv")

"""Data Preview"""

print("Retail Sales Dataset:")
print(retail_df.head())
print("\nDataset Info:")
print(retail_df.info())
print("\nMissing Values:")
print(retail_df.isnull().sum())

print("\nMenu Dataset:")
print(menu_df.head())

"""Cleaning"""

if 'date' in retail_df.columns:
    retail_df['date'] = pd.to_datetime(retail_df['date'])

# numerical values with median
num_cols = retail_df.select_dtypes(include=['float64', 'int64']).columns
retail_df[num_cols] = retail_df[num_cols].fillna(retail_df[num_cols].median())

# categorical values with mode
cat_cols = retail_df.select_dtypes(include=['object']).columns
for col in cat_cols:
    retail_df[col] = retail_df[col].fillna(retail_df[col].mode()[0])

"""describe"""

print("\nDescriptive Statistics:")
print(retail_df.describe())

"""time analysis"""

if 'date' in retail_df.columns and 'sales' in retail_df.columns:
    sales_over_time = retail_df.groupby('date')['sales'].sum()
    plt.figure(figsize=(12,6))
    sales_over_time.plot()
    plt.title("Sales Over Time")
    plt.ylabel("Total Sales")
    plt.xlabel("Date")
    plt.show()

"""heatmap"""

if 'Product Category' in retail_df.columns and 'Total Amount' in retail_df.columns:
    category_sales = retail_df.groupby('Product Category')['Total Amount'].sum().sort_values(ascending=False)
    sns.barplot(x=category_sales.values, y=category_sales.index, palette="viridis")
    plt.title("Top-Selling Product Categories")
    plt.xlabel("Total Sales Amount")
    plt.ylabel("Product Category")
    plt.tight_layout()
    plt.show()

"""merging"""

if 'product_id' in retail_df.columns and 'product_id' in menu_df.columns:
    merged_df = pd.merge(retail_df, menu_df, on='product_id', how='left')
    print("\nMerged Dataset Preview:")
    print(merged_df.head())

# 10. Save Cleaned Data
retail_df.to_csv("retail_sales_cleaned.csv", index=False)
